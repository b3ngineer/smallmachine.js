var smallmachine=function(c){Function.prototype.alsoBehavesLike=function(a){for(var b in a.prototype)if(0!=b.indexOf("_")){if("undefined"!==typeof this.prototype[b]){var c=this.prototype[b].prototype.virtual,e=a.prototype[b].prototype.virtual;if(c&&e)throw Error("Cannot mixin duplicate named virtual behaviors: "+b);if(c){this.prototype[b]=a.prototype[b];continue}else if(e)continue;throw Error("Cannot mixin same-named behaviors: "+b);}this.prototype[b]=a.prototype[b]}for(b in a)if(a.hasOwnProperty(b)&&
0!=b.indexOf("_")){if("undefined"!==typeof this.prototype[b])throw Error("Cannot mixin same-named properties: "+b);this.prototype[b]=a[b]}};var f=function(a){this._title=a;return this};f.prototype.add=function(a){a=new this.Term(a,this);this[a._value]=a;return this};f.prototype.Term=function(a,b){this._ontology=b;"undefined"!==typeof a._value&&"undefined"!==typeof a._type?(this._value=a._value,this._type=a._type):(this._value=a,this._type=null);return this};var e=function(a,b,c){this._value=a;this._type=
b;this._ontology=c;return this};e.prototype.relatesTo=function(a,b){if(a._type===c.CONCEPT)throw Error("Cannot define a relationship with a concept type: "+a._value);null===a._type&&(a._type=c.RELATIONSHIP);if(b._type===c.RELATIONSHIP)throw Error("Cannot create a relationship with a relationship type: "+b._value);null===b._type&&(b._type=c.CONCEPT);if(this._type===c.RELATIONSHIP)throw Error("Cannot create a relationship from a relationship type: "+this._value);null===this._type&&(this._type=c.CONCEPT);
this._ontology[this._value][a._value]=new this._ontology.Term(a);this._ontology[this._value][a._value][b._value]=b;this._ontology[this._value][b._value]=b;"undefined"===typeof b._relatesTo&&(b._relatesTo=[]);b._relatesTo.push(this._ontology[this._value][a._value]);for(var d in b)if(b.hasOwnProperty(d)&&!("function"===typeof b[d]||0===d.indexOf("_"))&&"undefined"!==typeof b[d]._value)this._ontology[this._value][a._value][d]=b[d],this._ontology[this._value][d]=b[d],"undefined"===typeof b[d]._relatesTo&&
(b[d]._relatesTo=[]),b[d]._relatesTo.push(this._ontology[this._value][a._value]);return this};e.prototype.isA=function(a){if(a._type===c.RELATIONSHIP)throw Error("Cannot apply isA to a relationship type: "+a._value);null===a._type&&(a._type=c.CONCEPT);if(this._type===c.RELATIONSHIP)throw Error("Cannot apply isA to a relationship type: "+this._value);null===this._type&&(this._type=c.CONCEPT);this._ontology[a._value][this._value]=this;return this};e.prototype.hasRange=function(a){if(a._type===c.RELATIONSHIP)throw Error("Cannot apply hasRange to a relationship type: "+
a._value);null===a._type&&(a._type=c.CONCEPT);if(this._type===c.CONCEPT)throw Error("Cannot assign hasRange from a concept type: "+this._value);null===this._type&&(this._type=c.RELATIONSHIP);this._ontology[this._value][a._value]=a;"undefined"===typeof a._relatesTo&&(a._relatesTo=[]);a._relatesTo.push(this);for(var b in a)if(a.hasOwnProperty(b)&&!("function"===typeof a[b]||0===b.indexOf("_"))&&"undefined"!==typeof a[b]._value)this._ontology[this._value][a[b]._value]=a[b],"undefined"===typeof a[b]._relatesTo&&
(a[b]._relatesTo=[]),a[b]._relatesTo.push(this);return this};e.prototype.hasDomain=function(a){if(a._type===c.RELATIONSIP)throw Error("Cannot apply hasRange to a relationship type: "+a._value);null===a._type&&(a._type=c.CONCEPT);if(this._type===c.CONCEPT)throw Error("Cannot assign hasRange from a concept type: "+this._value);null===this._type&&(this._type=c.RELATIONSHIP);this._ontology[a._value][this._value]=this;return this};f.prototype.Term.alsoBehavesLike(e);c=function(a){console.log(a);return new f(a)};
c.CONCEPT="concept";c.RELATIONSHIP="relationship";c.types={};c.addMessageType=function(a,b){if("function"!==typeof b)throw Error("Cannot create a message type without a constructor (function)");"undefined"!==typeof c.types[a]?c.types[a].alsoBehavesLike(b):(c.types[a]=b,c.types[a].prototype.getType=function(){return"[object "+a+"]"},c.types[a].prototype.ofType=function(a){return this.getType()=="[object "+a+"]"})};e=function(a){this._channel=a;return this};e.prototype.publish=function(a,b){this._channel.publish(a,
b);return this};c.addMessageType("AsyncResult",e);return c}(smallmachine||{});
