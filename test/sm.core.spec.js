describe('sm.core', function() {

	it('should create the add method on the core', function() {
		expect(sm.add).toBeDefined();
	});

	describe('pub/sub', function() {
		it('should implement the subscribe method on a channel object', function() {
			expect(sm.thing.subscribe).toBeDefined();
		});

		it('should implement the publish method on a channel object', function() {
			expect(sm.thing.publish).toBeDefined();
		});
		
		it('should use lazy instantiation of the suscriber collection on an inheriting prototype', function() {
			expect(sm.thing._subscribers).not.toBeDefined();
			sm.thing.subscribe({
				update :function(result) {
				},
				cancel : function(result) {
				}
			});
			expect(sm.thing._subscribers).toBeDefined();
		});

		it('should add a subscriber to the user channel\'s internal collection', function() {
			sm.thing.user.subscribe({
				update :function(result) { 
				},
				cancel : function(result) {
				}
			});

			expect(sm.thing.user._subscribers.length).toBe(1);
			expect(sm.user._subscribers.length).toBe(1);
			delete sm.thing.user._subscribers;
		});

		it('should notify subscribers on action and action subclasses during a publish on user', function() {
			var notified = 0;

			sm.action.subscribe({
				update : function(result) {
					notified++;
				},
				cancel : function(result) {
				}
			});

			sm.click.subscribe({
				update : function(result) {
					notified++;
				},
				cancel : function(result) {
				}
			});

			sm.doubleClick.subscribe({
				update : function(result) {
					notified++;
				},
				cancel : function(result) {
				}
			});

			sm.keyPress.subscribe({
				update : function(result) {
					notified++;
				},
				cancel : function(result) {
				}
			});

			sm.user.publish({}); // publish to all vertices under user
			expect(notified).toBe(4);
			delete sm.performs.action._subscribers;
			delete sm.performs.action.click._subscribers;
			delete sm.performs.action.doubleClick._subscribers;
			delete sm.performs.action.keyPress._subscribers;
		});

		it('should notify subscribers with results of scalar types', function() {
            var notified = null;

			sm.keyPress.subscribe({
				update : function(result) {
                    notified = result;
				},
				cancel : function(result) {
				}
			});

            sm.keyPress.publish('test');
            expect(notified).toBe('test');
			delete sm.performs.action.keyPress._subscribers;
        });

		it('should notify subscribers with results of object types', function() {
            var notified = null;

			sm.keyPress.subscribe({
				update : function(result) {
                    notified = result;
				},
				cancel : function(result) {
				}
			});

            sm.keyPress.publish({ test : 123 });
            expect(notified.test).toBe(123);
			delete sm.performs.action.keyPress._subscribers;
        });

		it('should notify subscribers with results generated by passed in functions', function() {
            var notified = null;
			sm.keyPress.subscribe({update:function(result){notified=result;},cancel:function(result){}});
            sm.keyPress.publish(function(){return 123;});
            expect(notified).toBe(123);
			delete sm.keyPress._subscribers;
        });
	});
});

